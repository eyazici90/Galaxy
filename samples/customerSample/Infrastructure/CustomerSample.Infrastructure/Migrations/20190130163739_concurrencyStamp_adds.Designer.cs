// <auto-generated />
using System;
using CustomerSample.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustomerSample.Infrastructure.Migrations
{
    [DbContext(typeof(CustomerSampleDbContext))]
    [Migration("20190130163739_concurrencyStamp_adds")]
    partial class concurrencyStamp_adds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("customer")
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomerSample.Customer.Domain.AggregatesModel.BrandAggregate.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<int?>("CreatorUserId");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gsm");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierUserId");

                    b.Property<string>("SNCode");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CustomerSample.Customer.Domain.AggregatesModel.BrandAggregate.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("Gsm")
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFraud");

                    b.Property<int>("LimitId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Vkn")
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("LimitId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("CustomerSample.Customer.Domain.AggregatesModel.GroupAggregate.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CustomerSample.Domain.AggregatesModel.LimitationAggregate.Limit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LimitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("LimitTypeId");

                    b.Property<decimal>("LimitValue");

                    b.HasKey("Id");

                    b.HasIndex("LimitTypeId");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("CustomerSample.Domain.AggregatesModel.LimitationAggregate.LimitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LimitTypes");
                });

            modelBuilder.Entity("CustomerSample.Customer.Domain.AggregatesModel.BrandAggregate.Merchant", b =>
                {
                    b.HasOne("CustomerSample.Customer.Domain.AggregatesModel.BrandAggregate.Brand")
                        .WithMany("Merchants")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CustomerSample.Domain.AggregatesModel.LimitationAggregate.Limit")
                        .WithMany()
                        .HasForeignKey("LimitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CustomerSample.Domain.AggregatesModel.LimitationAggregate.Limit", b =>
                {
                    b.HasOne("CustomerSample.Domain.AggregatesModel.LimitationAggregate.LimitType", "LimitType")
                        .WithMany()
                        .HasForeignKey("LimitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
